// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                 String  @id @default(auto()) @map("_id") @db.ObjectId
    userId             String  @db.ObjectId
    access_token       String?
    expires_at         BigInt?
    oauth_token        String?
    oauth_token_secret String?
    provider           String
    providerAccountId  String
    refresh_token      String?
    scope              String?
    token_type         String?
    type               String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId], name: "provider_providerAccountId")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String          @id @default(auto()) @map("_id") @db.ObjectId
    email          String          @unique
    emailVerified  DateTime?
    image          String?
    name           String?
    accounts       Account[]
    sessions       Session[]
    role           String?         @default("user")
    createdAt      DateTime?       @default(now())
    generatedTexts GeneratedText[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model GeneratedText {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    text      String
    createdAt DateTime? @default(now())
    user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String?   @db.ObjectId

    prompt   String
    topic    String
    keywords String
    language String
    level    String
}
